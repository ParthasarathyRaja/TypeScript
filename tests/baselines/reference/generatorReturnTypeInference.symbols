=== tests/cases/conformance/generators/generatorReturnTypeInference.ts ===
declare const iterableIterator: IterableIterator<number>;
>iterableIterator : Symbol(iterableIterator, Decl(generatorReturnTypeInference.ts, 0, 13))
>IterableIterator : Symbol(IterableIterator, Decl(lib.es2015.iterable.d.ts, --, --))

declare const generator: Generator<number, string, boolean>;
>generator : Symbol(generator, Decl(generatorReturnTypeInference.ts, 1, 13))
>Generator : Symbol(Generator, Decl(lib.es2015.generator.d.ts, --, --))

declare const never: never;
>never : Symbol(never, Decl(generatorReturnTypeInference.ts, 2, 13))

// 'yield' iteration type inference
function* g001() { // Generator<undefined, void, unknown>
>g001 : Symbol(g001, Decl(generatorReturnTypeInference.ts, 2, 27))

    yield;
}

function* g002() { // Generator<number, void, unknown>
>g002 : Symbol(g002, Decl(generatorReturnTypeInference.ts, 7, 1))

    yield 1;
}

function* g003() { // Generator<never, void, unknown>
>g003 : Symbol(g003, Decl(generatorReturnTypeInference.ts, 11, 1))

    yield* [];
}

function* g004() { // Generator<number, void, unknown>
>g004 : Symbol(g004, Decl(generatorReturnTypeInference.ts, 15, 1))

    yield* iterableIterator;
>iterableIterator : Symbol(iterableIterator, Decl(generatorReturnTypeInference.ts, 0, 13))
}

function* g005() { // Generator<number, void, boolean>
>g005 : Symbol(g005, Decl(generatorReturnTypeInference.ts, 19, 1))

    yield* generator;
>generator : Symbol(generator, Decl(generatorReturnTypeInference.ts, 1, 13))
}

function* g006() { // Generator<1 | 2, void, unknown>
>g006 : Symbol(g006, Decl(generatorReturnTypeInference.ts, 23, 1))

    yield 1;
    yield 2;
}

function* g007() { // Generator<never, void, unknown>
>g007 : Symbol(g007, Decl(generatorReturnTypeInference.ts, 28, 1))

    yield never;
>never : Symbol(never, Decl(generatorReturnTypeInference.ts, 2, 13))
}

// 'return' iteration type inference
function* g102() { // Generator<never, number, unknown>
>g102 : Symbol(g102, Decl(generatorReturnTypeInference.ts, 32, 1))

    return 1;
}

function* g103() { // Generator<never, 1 | 2, unknown>
>g103 : Symbol(g103, Decl(generatorReturnTypeInference.ts, 37, 1))

    if (Math.random()) return 1;
>Math.random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))
>Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))

    return 2;
}

function* g104() { // Generator<never, never, unknown>
>g104 : Symbol(g104, Decl(generatorReturnTypeInference.ts, 42, 1))

    return never;
>never : Symbol(never, Decl(generatorReturnTypeInference.ts, 2, 13))
}

// 'next' iteration type inference
function* g201() { // Generator<number, void, string>
>g201 : Symbol(g201, Decl(generatorReturnTypeInference.ts, 46, 1))

    let a: string = yield 1;
>a : Symbol(a, Decl(generatorReturnTypeInference.ts, 50, 7))
}

function* g202() { // Generator<1 | 2, void, string & number>
>g202 : Symbol(g202, Decl(generatorReturnTypeInference.ts, 51, 1))

    let a: string = yield 1;
>a : Symbol(a, Decl(generatorReturnTypeInference.ts, 54, 7))

    let b: number = yield 2;
>b : Symbol(b, Decl(generatorReturnTypeInference.ts, 55, 7))
}

// mixed iteration types inference

function* g301() { // Generator<undefined, void, unknown>
>g301 : Symbol(g301, Decl(generatorReturnTypeInference.ts, 56, 1))

    yield;
    return;
}

function* g302() { // Generator<number, void, unknown>
>g302 : Symbol(g302, Decl(generatorReturnTypeInference.ts, 63, 1))

    yield 1;
    return;
}

function* g303() { // Generator<undefined, string, unknown>
>g303 : Symbol(g303, Decl(generatorReturnTypeInference.ts, 68, 1))

    yield;
    return "a";
}

function* g304() { // Generator<number, string, unknown>
>g304 : Symbol(g304, Decl(generatorReturnTypeInference.ts, 73, 1))

    yield 1;
    return "a";
}

function* g305() { // Generator<1 | 2, "a" | "b", unknown>
>g305 : Symbol(g305, Decl(generatorReturnTypeInference.ts, 78, 1))

    if (Math.random()) yield 1;
>Math.random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))
>Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))

    yield 2;
    if (Math.random()) return "a";
>Math.random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))
>Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))

    return "b";
}

function* g306() { // Generator<number, boolean, "hi">
>g306 : Symbol(g306, Decl(generatorReturnTypeInference.ts, 85, 1))

    const a: "hi" = yield 1;
>a : Symbol(a, Decl(generatorReturnTypeInference.ts, 88, 9))

    return true;
}

